{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Taste the difference.","body":"# vim-flavor, a tool to manage your favorite Vim plugins\r\n\r\n\r\n\r\n\r\n## Set up the tool for a new-style plugin management\r\n\r\n### Requirements\r\n\r\n* [Git](http://git-scm.com/) 1.7.9 or later\r\n* [Ruby](http://www.ruby-lang.org/) 1.9.2 or later\r\n  * Recommendation: Use [RVM](http://beginrescueend.com/) or other tools\r\n    for ease of installation across different envinronments.\r\n* [Vim](http://www.vim.org/) 7.3 or later\r\n  * Note that Vim should be compiled as normal, big or huge version\r\n    to use most of plugins.\r\n\r\n\r\n### Supported platforms\r\n\r\n* Unix-like environments such as Linux, Mac OS X, etc.\r\n* Though Microsoft Windows is not directly supported,\r\n  it is possible to manage Vim plugins via Cygwin or other environments.\r\n\r\n\r\n### Installation steps\r\n\r\n    gem install vim-flavor\r\n\r\n\r\n### Installable plugins\r\n\r\nNot all Vim plugins can be installed with vim-flavor.\r\nvim-flavor can install plugins which meet the following conditions:\r\n\r\n* Plugins must have dedicated Git repositories.\r\n  vim-flavor does not support other version control systems.\r\n  This is an intentional design.  Because:\r\n  * [vim-scripts.org](http://vim-scripts.org/) provides\r\n    [comprehensive Git mirrors](https://github.com/vim-scripts) for\r\n    [plugins uploaded to www.vim.org](http://www.vim.org/scripts/index.php).\r\n  * Experimental plugins which are not uploaded to www.vim.org\r\n    are usually found in [GitHub](https://github.com/).\r\n* Plugins must follow [the versioning pocilies of\r\n  RubyGems](http://docs.rubygems.org/read/chapter/7#page26) and have \"version\"\r\n  tags in their repositories.  For example, if there is the version 1.2.3 of\r\n  a plugin, its repository must have the tag `1.2.3`, and the files of the\r\n  version 1.2.3 can be checked out via the tag `1.2.3`.  In other words,\r\n  plugins which do not have proper tags are not installable.\r\n  This is an intentional design.  Because:\r\n  * It's not possible to determine whether two versions are compatible or not\r\n    without \"version\" tags.  Compatibility is a big problem to resolve\r\n    dependencies of plugins.  For example, if plugin A requires plugin X 1.2.3\r\n    or later while plugin B requires plugin X 2.0 or later, it's not possible\r\n    to use A and B at the same time.  Such problems should be detected before\r\n    installing plugins.\r\n  * Git mirrors by vim-scripts.org are tagged with version numbers.\r\n  * Some Git repositories might not have \"version\" tags.\r\n    Such plugins are not ready to use for everyone.\r\n    So that it should not be installable.\r\n* Plugins must have proper directory structures.\r\n  For example, directories such as `autoload`, `syntax` etc should exist in\r\n  the roots of plugins.\r\n  This is an intentional design.  Because:\r\n  * Git mirrors by vim-scripts.org have proper directory structures even if\r\n    the original plugins are uploaded to www.vim.org without proper directory\r\n    structures.  (A good example is\r\n    [a.vim](http://www.vim.org/scripts/script.php?script_id=31) and\r\n    [its mirror](https://github.com/vim-scripts/a.vim).)\r\n  * Other Git repositories might not have proper directory structures.\r\n    Such plugins are not ready to use for everyone.\r\n    So that it should not be installable.\r\n\r\n\r\n\r\n\r\n## Typical usage\r\n\r\n### Start using vim-flavor\r\n\r\n    cd $YOUR_REPOSITORY_FOR_DOTFILES\r\n\r\n    cat >VimFlavor <<'END'\r\n      # * Declare using git://github.com/kana/vim-textobj-indent.git\r\n      # * vim-flavor fetches git://github.com/$USER/$REPO.git\r\n      #   if the argument is written in '$USER/$REPO' format.\r\n      # * kana/vim-textobj-indent requires kana/vim-textobj-user.\r\n      #   Such dependencies are automatically installed\r\n      #   if the flavored plugin declares its dependencies with VimFlavor file.\r\n      #   (FIXME: Resolving dependencies will be implemented later.)\r\n      flavor 'kana/vim-textobj-indent'\r\n\r\n      # * Declare using git://github.com/vim-scripts/fakeclip.git\r\n      # * vim-flavor fetches git://github.com/vim-scripts/$REPO.git\r\n      #   if the argument is written in '$REPO' format.\r\n      flavor 'fakeclip'\r\n\r\n      # * Declare using git://github.com/kana/vim-altr.git\r\n      # * vim-flavor fetches the URI\r\n      #   if the argument seems to be a URI.\r\n      flavor 'git://github.com/kana/vim-altr.git'\r\n\r\n      # * Declare using kana/vim-smartchr 0.1.0 or later and older than 0.2.0.\r\n      flavor 'kana/vim-smartchr', '~> 0.1.0'\r\n\r\n      # * Declare using kana/vim-smartword 0.1 or later and older than 1.0.\r\n      flavor 'kana/vim-smartword', '~> 0.1'\r\n\r\n      # * Declare using kana/vim-smarttill 0.1.0 or later.\r\n      flavor 'kana/vim-smarttill', '>= 0.1.0'\r\n    END\r\n\r\n    # Fetch the plugins declared in the VimFlavor,\r\n    # create VimFlavor.lock for a snapshot of all plugins and versions,\r\n    # then install the plugins and a bootstrap script into ~/.vim etc.\r\n    vim-flavor install\r\n\r\n    # Add the following line into the first line of your vimrc:\r\n    #\r\n    #   runtime flavors/bootstrap.vim\r\n    vim vimrc\r\n\r\n    git add VimFlavor VimFlavor.lock vimrc\r\n    git commit -m 'Use vim-flavor to manage my favorite Vim plugins'\r\n\r\n\r\n### Upgrade all plugins to the latest version\r\n\r\n    vim-flavor upgrade\r\n\r\n    git add VimFlavor.lock\r\n    git commit -m 'Upgrade my favorite Vim plugins'\r\n\r\n\r\n### Add more plugins into your dotfile repository\r\n\r\n    cat >>VimFlavor <<'END'\r\n\r\n      flavor 'kana/vim-operator-replace'\r\n\r\n    END\r\n\r\n    # Fetch newly added plugins,\r\n    # update VimFlavor.lock for the plugins,\r\n    # then install the plugins into ~/.vim etc.\r\n    vim-flavor install\r\n\r\n    git add VimFlavor VimFlavor.lock\r\n    git commit -m 'Use kana/vim-operator-replace'\r\n\r\n\r\n### Remove plugins from your dotfile repository\r\n\r\n    # Remove declarations of unused plugins from VimFlavor.\r\n    sed -i~ -e '/vim-smartchr/d' VimFlavor\r\n\r\n    # Update VimFlavor.lock for the removed plugins,\r\n    # then clean up the plugins from ~/.vim etc.\r\n    vim-flavor install\r\n\r\n    git add VimFlavor VimFlavor.lock\r\n    git commit -m 'Farewell kana/vim-smartchr'\r\n\r\n\r\n\r\n### Install plugins into a non-standard directory\r\n\r\n    vim-flavor install --vimfiles-path=/cygdrive/c/Users/kana/vimfiles\r\n\r\n\r\n### Farewell to vim-flavor\r\n\r\n    rm -r ~/.vim-flavor\r\n    rm -r ~/.vim/flavors  # or ~/vimfiles/flavors etc.\r\n\r\n    cd $YOUR_REPOSITORY_FOR_DOTFILES\r\n    rm VimFlavor VimFlavor.lock\r\n    git commit -am 'Farewell to vim-flavor'\r\n\r\n\r\n\r\n\r\n## Philosophy\r\n\r\nI know that there are several implementations for the same purpose and many\r\nusers love them, but all of them do not meet my taste.  That's why I wrote\r\nvim-flavor.  The philosophy on vim-flavor is as follows:\r\n\r\nWhole configuration including *versions of plugins* should be under a version\r\ncontrol system.  All of existing implementations do not manage versions of\r\nplugins.  This means that *it's not possible to use the same configuration\r\nacross multiple environments* (the only one exception is using\r\n[pathogen](https://github.com/tpope/vim-pathogen) with Git submodules,\r\nbut you'll find it's painful to manually manage many plugins).\r\n\r\nThere should be a standard way to describe proper dependencies of plugins to\r\ninstall dependencies without explicit declarations.  Most of existing\r\nimplementations do not resolve dependencies automatically (the only one\r\nexception is\r\n[vim-addon-manager](https://github.com/MarcWeber/vim-addon-manager), but it\r\ndoesn't take care about required versions).  The configuration file formats of\r\nvim-flavor are also used to describe dependencies of plugins with required\r\nversions.  This means that vim-flavor installs plugins and their dependencies\r\nautomatically (unfortunately this feature is not implemented yet, but it'll be\r\navailable soon).\r\n\r\nAny software should have enough and reproducible test cases.\r\nBut existing implementations such as\r\n[vundle](https://github.com/gmarik/vundle) and\r\n[neobundle](https://github.com/Shougo/neobundle.vim) are not developed so.\r\nIt's horrible for me.\r\n\r\nInstallation steps should be small, be reproducible, and not affect existing\r\nenvironment as less as possible.  Most of existing implementations require to\r\nmanually tweak `~/.vim` etc.  It's painful to set up such stuffs manually\r\nbecause a vimfiles path is varied on each platform.\r\n\r\nFinally, a tool and files deployed by the tool should be uninstalled easily.\r\n[Vimana](https://github.com/c9s/Vimana) does not meet this because it directly\r\nputs files into `~/.vim/colors` etc and it doesn't provide `uninstall`\r\ncommand.\r\n\r\n\r\n\r\n\r\n## License\r\n\r\nvim-flavor is released under the terms of so-called MIT/X license.\r\nSee the LICENSE file for the details.\r\n\r\n\r\n\r\n\r\n## Author\r\n\r\n* [Kana Natsuno](http://whileimautomaton.net/)\r\n  (also known as [@kana1](http://twitter.com/kana1))\r\n\r\n\r\n\r\n\r\n<!-- vim: set expandtab shiftwidth=4 softtabstop=4 textwidth=78 : -->\r\n","name":"vim-flavor"}